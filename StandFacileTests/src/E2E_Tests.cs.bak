/*****************************************************
 	NomeFile : StandFacileTests/StansFacileCommon_CLTests.cs
    Data	 : 20.10.2024
 	Autore	 : Mauro Artuso

	Classe per Unit Tests
 *****************************************************/

using System.Windows.Forms;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using static StandFacile.Define;
using static StandCommonFiles.ComDef;
using static StandCommonFiles.commonCl;
using static StandCommonFiles.ReceiptAndCopies;
using StandFacile;
using System.IO;
using System.Collections.Generic;
using System;
using System.Diagnostics;


namespace StandFacileTests
{

    [TestClass]
    public class StandFacile_E2ETests
    {
        [TestMethod]
        public void bReceiptGenerationCompare_IsTrue()
        {
            initActualDate();

            bool bResult = true;
            bool bSkipTotale;
            
            int iCurrentRow;
            int dateCharCountRef, dateCharCountCurrent;
            string sCurrStringTrimmed;

            List<string> sRefStringsList = new List<string>();
            List<string> sCurrStringsList = new List<string>();
            StreamReader fReference;
            StreamReader fCurrent;

            // serve per avere uscita su Console
            Trace.Listeners.Add(new TextWriterTraceListener(Console.Out));

            string sDirRefReceiptData = Directory.GetCurrentDirectory() + "\\..\\..\\refData\\" + NOME_DIR_RECEIPTS + ("1026");
            string[] sAllRefReceiptFiles = Directory.GetFiles(sDirRefReceiptData, "*.*", SearchOption.AllDirectories);

            string sDirCurrentReceiptData = Directory.GetCurrentDirectory() + "\\..\\..\\..\\StandFacile\\exe\\StandDati" + "\\" + ANNO_DIR + getActualDate().ToString("yyyy") + "\\" +
                                            NOME_DIR_RECEIPTS + getActualDate().ToString("MMdd");
            string[] sAllCurrentReceiptFiles = Directory.GetFiles(sDirCurrentReceiptData, "*.*", SearchOption.AllDirectories);

            // loop esterno con i files di riferimento
            foreach (var referenceFile in sAllRefReceiptFiles)
            {
                string sTmp;
                string sInRefStr, sRefStringTrimmed;
                string readRefFileTextContent = File.ReadAllText(referenceFile);

                fReference = File.OpenText(referenceFile);

                // loop esterno con i files prodotti correntemente
                foreach (var currentReceiptFile in sAllCurrentReceiptFiles)
                {
                    if (Path.GetFileName(currentReceiptFile) != Path.GetFileName(referenceFile))
                        continue;

                    string sInCurrentStr;
                    fCurrent = File.OpenText(currentReceiptFile);

                    Trace.WriteLine("****************************");
                    sTmp = string.Format($"*** file: {Path.GetFileName(currentReceiptFile)}");
                    Trace.WriteLine(sTmp);
                    Trace.WriteLine("****************************");

                    sRefStringsList.Clear();
                    sCurrStringsList.Clear();

                    // legge i files e prepara le 2 liste 
                    while (((sInRefStr = fReference.ReadLine()) != null) && (sRefStringsList.Count < 1000))
                        sRefStringsList.Add(sInRefStr);

                    while (((sInCurrentStr = fCurrent.ReadLine()) != null) && (sCurrStringsList.Count < 1000))
                        sCurrStringsList.Add(sInCurrentStr);

                    fReference.Close();
                    fCurrent.Close();

                    iCurrentRow = 0;
                    bSkipTotale = false;

                    foreach (string sRef in sRefStringsList)
                    {
                        if (iCurrentRow >= sCurrStringsList.Count)
                        {
                            sTmp = string.Format($"***  fail *** iCurrentRow > sCurrStringsList.Count");
                            Trace.WriteLine(sTmp);

                            bResult = false;
                            break;
                        }

                        sRefStringTrimmed = sRef.Trim();
                        sCurrStringTrimmed = sCurrStringsList[iCurrentRow].Trim();

                        dateCharCountRef = 0;
                        dateCharCountRef += sRefStringTrimmed.Split('/').Length - 1;
                        dateCharCountRef += sRefStringTrimmed.Split('.').Length - 1;
                        
                        dateCharCountCurrent = 0;
                        dateCharCountCurrent += sCurrStringTrimmed.Split('/').Length - 1;
                        dateCharCountCurrent += sCurrStringTrimmed.Split('.').Length - 1;

                        // contronfo stringhe
                        if (string.Compare(sRefStringTrimmed, sCurrStringTrimmed) == 0)
                            Trace.WriteLine(sCurrStringTrimmed);

                        // contronfo stringhe contenenti la data
                        else if ((dateCharCountRef == dateCharCountCurrent) && (dateCharCountCurrent == 5))
                            Trace.WriteLine(sCurrStringTrimmed);

                        // contronfo stringhe contenenti Annullo
                        else if (sCurrStringTrimmed == sConst_Annullo[0])
                        {
                            Trace.WriteLine(sCurrStringTrimmed);
                            iCurrentRow++;

                            sCurrStringTrimmed = sCurrStringsList[iCurrentRow].Trim();
                            if (sCurrStringTrimmed == sConst_Annullo[1])
                            {
                                Trace.WriteLine(sCurrStringTrimmed);
                                iCurrentRow++;

                                sCurrStringTrimmed = sCurrStringsList[iCurrentRow].Trim();
                                if (sCurrStringTrimmed == sConst_Annullo[2])
                                {
                                    Trace.WriteLine(sCurrStringTrimmed);
                                    iCurrentRow++;
                                    iCurrentRow++;
                                }
                            }
                        }

                        // contronfo stringhe contenenti Articoli non a Listino
                        else if (sCurrStringTrimmed.Contains("PARMESAN_1"))
                        {
                            Trace.WriteLine(sCurrStringTrimmed);
                            iCurrentRow++;

                            sCurrStringTrimmed = sCurrStringsList[iCurrentRow].Trim();
                            if (sCurrStringTrimmed.Contains("PARMESAN_2"))
                            {
                                Trace.WriteLine(sCurrStringTrimmed);
                                iCurrentRow++;

                                sCurrStringTrimmed = sCurrStringsList[iCurrentRow].Trim();
                                if (sCurrStringTrimmed.Contains("PARMESAN_3"))
                                {
                                    Trace.WriteLine(sCurrStringTrimmed);
                                    iCurrentRow++;
                                    iCurrentRow++;

                                    bSkipTotale = true;
                                }
                            }
                        }

                        // contronfo stringhe contenenti Articoli non a Listino ... segue
                        else if (sCurrStringTrimmed.Contains("TOTALE") && bSkipTotale)
                        {
                            // eccezzione in presenza di scontrino con PARMESAN_x
                            bSkipTotale = false;
                        }

                        // errore
                        else
                        {
                            sTmp = string.Format($"***  fail *** {sCurrStringTrimmed}");
                            Trace.WriteLine(sTmp);

                            bResult = false;
                            break;
                        }

                        iCurrentRow++;
                    }

                    // termina il confronto al primo errore
                    if (!bResult)
                        break;

                    // esaurite le stringhe dello scontrino corrente
                    if (iCurrentRow == sCurrStringsList.Count)
                        break;
                }

                if (!bResult)
                    break;
            }

            Assert.IsTrue(bResult);
        }

        [TestMethod]
        public void bCopiesGenerationCompare_IsTrue()
        {
            initActualDate();

            bool bResult = true;
            bool bSkipTotale;

            int iCurrentRow;
            int dateCharCountRef, dateCharCountCurrent;
            string sCurrStringTrimmed;

            List<string> sRefStringsList = new List<string>();
            List<string> sCurrStringsList = new List<string>();
            StreamReader fReference;
            StreamReader fCurrent;

            // serve per avere uscita su Console
            Trace.Listeners.Add(new TextWriterTraceListener(Console.Out));

            string sDirRefReceiptData = Directory.GetCurrentDirectory() + "\\..\\..\\refData\\" + NOME_DIR_COPIES + ("1026");
            string[] sAllRefReceiptFiles = Directory.GetFiles(sDirRefReceiptData, "*.*", SearchOption.AllDirectories);

            string sDirCurrentReceiptData = Directory.GetCurrentDirectory() + "\\..\\..\\..\\StandFacile\\exe\\StandDati" + "\\" + ANNO_DIR + getActualDate().ToString("yyyy") + "\\" +
                                            NOME_DIR_COPIES + getActualDate().ToString("MMdd");

            string[] sAllCurrentReceiptFiles = Directory.GetFiles(sDirCurrentReceiptData, "*.*", SearchOption.AllDirectories);

            // loop esterno con i files di riferimento
            foreach (var referenceFile in sAllRefReceiptFiles)
            {
                string sTmp;
                string sInRefStr, sRefStringTrimmed;
                string readRefFileTextContent = File.ReadAllText(referenceFile);

                fReference = File.OpenText(referenceFile);

                // loop esterno con i files prodotti correntemente
                foreach (var currentReceiptFile in sAllCurrentReceiptFiles)
                {
                    if (Path.GetFileName(currentReceiptFile) != Path.GetFileName(referenceFile))
                        continue;

                    string sInCurrentStr;
                    fCurrent = File.OpenText(currentReceiptFile);

                    Trace.WriteLine("****************************");
                    sTmp = string.Format($"*** file: {Path.GetFileName(currentReceiptFile)}");
                    Trace.WriteLine(sTmp);
                    Trace.WriteLine("****************************");

                    sRefStringsList.Clear();
                    sCurrStringsList.Clear();

                    // legge i files e prepara le 2 liste 
                    while (((sInRefStr = fReference.ReadLine()) != null) && (sRefStringsList.Count < 1000))
                        sRefStringsList.Add(sInRefStr);

                    while (((sInCurrentStr = fCurrent.ReadLine()) != null) && (sCurrStringsList.Count < 1000))
                        sCurrStringsList.Add(sInCurrentStr);

                    fReference.Close();
                    fCurrent.Close();

                    iCurrentRow = 0;
                    bSkipTotale = false;

                    foreach (string sRef in sRefStringsList)
                    {
                        if (iCurrentRow >= sCurrStringsList.Count)
                        {
                            sTmp = string.Format($"***  fail *** iCurrentRow > sCurrStringsList.Count");
                            Trace.WriteLine(sTmp);

                            bResult = false;
                            break;
                        }

                        sRefStringTrimmed = sRef.Trim();
                        sCurrStringTrimmed = sCurrStringsList[iCurrentRow].Trim();

                        dateCharCountRef = 0;
                        dateCharCountRef += sRefStringTrimmed.Split('/').Length - 1;
                        dateCharCountRef += sRefStringTrimmed.Split('.').Length - 1;

                        dateCharCountCurrent = 0;
                        dateCharCountCurrent += sCurrStringTrimmed.Split('/').Length - 1;
                        dateCharCountCurrent += sCurrStringTrimmed.Split('.').Length - 1;

                        // contronfo stringhe
                        if (string.Compare(sRefStringTrimmed, sCurrStringTrimmed) == 0)
                            Trace.WriteLine(sCurrStringTrimmed);

                        // contronfo stringhe contenenti la data
                        else if ((dateCharCountRef == dateCharCountCurrent) && (dateCharCountCurrent == 5))
                            Trace.WriteLine(sCurrStringTrimmed);

                        // contronfo stringhe contenenti Annullo
                        else if (sCurrStringTrimmed == sConst_Annullo[0])
                        {
                            Trace.WriteLine(sCurrStringTrimmed);
                            iCurrentRow++;

                            sCurrStringTrimmed = sCurrStringsList[iCurrentRow].Trim();
                            if (sCurrStringTrimmed == sConst_Annullo[1])
                            {
                                Trace.WriteLine(sCurrStringTrimmed);
                                iCurrentRow++;

                                sCurrStringTrimmed = sCurrStringsList[iCurrentRow].Trim();
                                if (sCurrStringTrimmed == sConst_Annullo[2])
                                {
                                    Trace.WriteLine(sCurrStringTrimmed);
                                    iCurrentRow++;
                                    iCurrentRow++;
                                }
                            }
                        }

                        // contronfo stringhe contenenti Articoli non a Listino
                        else if (sCurrStringTrimmed.Contains("PARMESAN_1"))
                        {
                            Trace.WriteLine(sCurrStringTrimmed);
                            iCurrentRow++;

                            sCurrStringTrimmed = sCurrStringsList[iCurrentRow].Trim();
                            if (sCurrStringTrimmed.Contains("PARMESAN_2"))
                            {
                                Trace.WriteLine(sCurrStringTrimmed);
                                iCurrentRow++;

                                sCurrStringTrimmed = sCurrStringsList[iCurrentRow].Trim();
                                if (sCurrStringTrimmed.Contains("PARMESAN_3"))
                                {
                                    Trace.WriteLine(sCurrStringTrimmed);
                                    iCurrentRow++;
                                    iCurrentRow++;

                                    bSkipTotale = true;
                                }
                            }
                        }

                        // contronfo stringhe contenenti Articoli non a Listino ... segue
                        else if (sCurrStringTrimmed.Contains("TOTALE") && bSkipTotale)
                        {
                            // eccezzione in presenza di scontrino con PARMESAN_x
                            bSkipTotale = false;
                        }

                        // errore
                        else
                        {
                            sTmp = string.Format($"***  fail *** {sCurrStringTrimmed}");
                            Trace.WriteLine(sTmp);

                            bResult = false;
                            break;
                        }

                        iCurrentRow++;
                    }

                    // termina il confronto al primo errore
                    if (!bResult)
                        break;

                    // esaurite le stringhe dello scontrino corrente
                    if (iCurrentRow == sCurrStringsList.Count)
                        break;
                }

                if (!bResult)
                    break;
            }

            Assert.IsTrue(bResult);
        }
    }

}
